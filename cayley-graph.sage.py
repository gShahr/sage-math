

# This file was *autogenerated* from the file cayley-graph.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4)
G=SymmetricGroup(_sage_const_3 )
CG = G.cayley_graph(generators=[G((_sage_const_1 ,_sage_const_2 )),G((_sage_const_2 ,_sage_const_3 ))])
CGU = CG.to_directed()
CGU.show()
plot = CGU.plot(edge_labels=True)
plot.save('s3-cayley-graph.png')

Q8 = QuaternionGroup()
CG = Q8.cayley_graph(generators=[Q8.gen(_sage_const_0 ), Q8.gen(_sage_const_1 )])
CGU = CG.to_directed()
CGU.show()
plot = CGU.plot(edge_labels=True)
plot.save('q8-cayley-graph.png')

G = SymmetricGroup(_sage_const_4 )
generators = [G((_sage_const_1 ,_sage_const_2 )), G((_sage_const_2 ,_sage_const_3 )), G((_sage_const_3 ,_sage_const_4 ))]
CG = G.cayley_graph(generators=generators)
CGU = CG.to_undirected()
plot = CGU.plot(edge_labels=True)
plot.save('s4-cayley-graph.png')
plot.show()

# Define the Knuth relations
def knuth_first_relation(perm):
    n = len(perm)
    for i in range(n - _sage_const_2 ):
        if perm[i] < perm[i + _sage_const_2 ] < perm[i + _sage_const_1 ]:
            new_perm = perm[:i] + (perm[i + _sage_const_1 ], perm[i], perm[i + _sage_const_2 ]) + perm[i + _sage_const_3 :]
            yield new_perm

def knuth_second_relation(perm):
    n = len(perm)
    for i in range(n - _sage_const_2 ):
        if perm[i + _sage_const_1 ] < perm[i] < perm[i + _sage_const_2 ]:
            new_perm = perm[:i] + (perm[i + _sage_const_1 ], perm[i], perm[i + _sage_const_2 ]) + perm[i + _sage_const_3 :]
            yield new_perm

# Example permutation in S3
perm = (_sage_const_2 , _sage_const_1 , _sage_const_3 , _sage_const_4 )

# Apply Knuth relations
first_relation_results = list(knuth_first_relation(perm))
second_relation_results = list(knuth_second_relation(perm))

print(f"Original permutation: {perm}")
print(f"First relation results: {first_relation_results}")
print(f"Second relation results: {second_relation_results}")

def generate_permutohedron(n):
    perms = list(Permutations(n))
    G = Graph()
    for perm in perms:
        G.add_vertex(perm)
    for i in range(len(perms)):
        for j in range(i + _sage_const_1 , len(perms)):
            diff_positions = [k for k in range(n) if perms[i][k] != perms[j][k]]
            if len(diff_positions) == _sage_const_2  and abs(diff_positions[_sage_const_0 ] - diff_positions[_sage_const_1 ]) == _sage_const_1 :
                G.add_edge(perms[i], perms[j])
    return G

permutohedron = generate_permutohedron(_sage_const_4 )
plot = permutohedron.plot(edge_colors=True, vertex_labels=True)
plot.show()
plot.save('permutohedron_order_4.png')

